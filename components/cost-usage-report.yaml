AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: setup cost usage report
Resources:
  CostBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1095

  CostBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CostBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Effect: Allow
            Resource: !Sub
              - arn:aws:s3:::${bucket}
              - bucket: !Ref CostBucket
            Principal:
              Service: billingreports.amazonaws.com
          - Action:
             - s3:PutObject
            Effect: Allow
            Resource: !Sub
              - arn:aws:s3:::${bucket}/*
              - bucket: !Ref CostBucket
            Principal:
              Service: billingreports.amazonaws.com

  CreateCostReport:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 300
      Runtime: python3.7
      Handler: index.handler
      Environment:
        Variables:
          bucket: !Ref CostBucket
          reportName: "daily-costs-usage-report"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - cur:*ReportDefinition
              Resource: "*"
      InlineCode: |
        import json
        import boto3
        import os

        def handler(event, context):
            SES_REGION = os.environ.get('SES_REGION')
            s3 = boto3.client('s3')
            client = boto3.client('cur')

            response = client.put_report_definition(
                ReportDefinition={
                    'ReportName': os.environ.get('reportName'),
                    'TimeUnit': 'DAILY',
                    'Format': 'Parquet',
                    'Compression': 'Parquet',
                    'AdditionalSchemaElements': ['RESOURCES'],
                    'S3Bucket': os.environ.get('bucket'),
                    'S3Prefix': 'string',
                    'S3Region': client.meta.region_name,
                    'AdditionalArtifacts': ['ATHENA'],
                }
            )

            return {
                'statusCode': 200,
                'bo': json.dumps(response)
            }

Outputs:
  CostsReportBucket:
    Value: !Ref CostBucket
    Description: Costs and usage reports bucket
